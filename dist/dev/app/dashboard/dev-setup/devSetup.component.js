"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var DevSetupComponent = (function () {
    function DevSetupComponent() {
        this.code = '';
    }
    DevSetupComponent.prototype.ngAfterViewChecked = function () {
        return Prism.highlightAll();
    };
    DevSetupComponent.prototype.ngOnInit = function () {
        this.showModuleCode();
    };
    DevSetupComponent.prototype.showModuleCode = function () {
        var code = "\nimport { SignalRModule, SignalRConfiguration } from 'ng2-signalr';\n\nlet signalrConfiguration = new SignalRConfiguration();\nsignalrConfiguration.hubName = 'Ng2SignalRHub';\nsignalrConfiguration.logging = true;\nsignalrConfiguration.url = 'http://ng2-signalr-backend.azurewebsites.net/';\nsignalrConfiguration.qs = { user: 'donald' };\n\n@NgModule({\n  imports: [\n    SignalRModule.configure(signalrConfiguration)\n  ],\n  declarations: [AppComponent],\n  providers: [ConnectionResolver],\n  bootstrap: [AppComponent]\n  });";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showResolverCode = function () {
        var code = "\nimport { Resolve } from '@angular/router';\nimport { SignalR, SignalRConnection } from 'ng2-signalr';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ConnectionResolver implements Resolve<SignalRConnection> {\n\n  constructor(private _signalR: SignalR) { }\n\n  resolve() {\n    console.log('ConnectionResolver. Resolving...');\n    return this._signalR.connect();\n  }\n}";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showRouteCode = function () {
        var code = "\n// we use the resolver to resolve 'connection' when navigation to the chat page\nimport { Route } from '@angular/router';\nimport { DocumentationComponent } from './index';\nimport { ConnectionResolver } from './documentation.route.resolver';\n\nexport const DocumentationRoutes: Route[] = [\n\t{\n\t\tpath: 'documentation',\n    component: DocumentationComponent,\n     resolve: { connection: ConnectionResolver }\n\t}\n];";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showChatComponentCode = function () {
        var code = "\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { SignalRConnection } from 'ng2-signalr';\n\n@Component({\n  moduleId: module.id,\n  selector: 'chat',\n  template: './chat.component.html'\n})\n\nexport class ChatComponent {\n  private _connection: SignalRConnection;\n\n  constructor(route: ActivatedRoute) {\n    this._connection = route.snapshot.data['connection'];\n  }\n}";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showServerCode = function () {
        var code = "\n[HubName(\"Ng2SignalRHub\")]\npublic class Ng2SignalRHub : Hub\n{\n        public override Task OnConnected() {\n\n            Trace.TraceInformation(\"Ng2SignalRHub - OnConnected\");\n\n            var user = GetAuthenticatedUser();\n\n            Clients.All.OnUserConnected(user);\n\n            return base.OnConnected();\n        }\n\n        private string GetAuthenticatedUser() {\n            var username = Context.QueryString[\"user\"];\n            if (string.IsNullOrWhiteSpace(username))\n                throw new System.Exception(\"Failed to authenticate user.\");\n\n            Trace.TraceInformation(\"GetAuthenticatedUser :\" + username);\n\n            return username;\n        }\n<<<<<<< HEAD\n}";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showUnitTestCode = function () {
        var code = "\nimport { inject, TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { SignalRConnectionMock } from 'ng2-signalr';\nimport { MockActivatedRoute } from './activated.route.mock';\n\ndescribe('Documentation', () => {\n\n  let connectionMock = new SignalRConnectionMock();\n  let activatedRouteMock = new MockActivatedRoute();\n  activatedRouteMock.snapshot.data = { 'connection': connectionMock };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        DocumentationComponent,\n        { provide: ActivatedRoute, useValue: activatedRouteMock }\n      ]\n    });\n  });\n});";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showRouteMockCode = function () {
        var code = "\nimport { Observable } from 'rxjs';\nimport { Type } from '@angular/core';\nimport { ActivatedRoute, Route, ActivatedRouteSnapshot, UrlSegment, Params, Data } from '@angular/router';\n\nexport class MockActivatedRoute implements ActivatedRoute{\n    snapshot: ActivatedRouteSnapshot;\n    url: Observable<UrlSegment[]>;\n    params: Observable<Params>;\n    queryParams: Observable<Params>;\n    fragment: Observable<string>;\n    data: Observable<Data>;\n    outlet: string;\n    component: Type<any>|string;\n    routeConfig: Route;\n    root: ActivatedRoute;\n    parent: ActivatedRoute;\n    firstChild: ActivatedRoute;\n    children: ActivatedRoute[];\n    pathFromRoot: ActivatedRoute[];\n    toString(): string{\n        return '';\n    };\n\n    constructor() {\n      this.snapshot = new ActivatedRouteSnapshot();\n    }\n}";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.ngOnDestroy = function () {
        console.log('ngOnDestroy');
    };
    DevSetupComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'dev-setup',
            templateUrl: './dev-setup.component.html'
        }), 
        __metadata('design:paramtypes', [])
    ], DevSetupComponent);
    return DevSetupComponent;
}());
exports.DevSetupComponent = DevSetupComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
