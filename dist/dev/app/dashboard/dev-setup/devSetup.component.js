"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var DevSetupComponent = (function () {
    function DevSetupComponent() {
        this.code = '';
    }
    DevSetupComponent.prototype.ngAfterViewChecked = function () {
        return Prism.highlightAll();
    };
    DevSetupComponent.prototype.ngOnInit = function () {
        this.showModuleCode();
    };
    DevSetupComponent.prototype.showModuleCode = function () {
        var code = "\nimport { SignalRModule, SignalRConfiguration } from 'ng2-signalr';\n\nlet signalrConfiguration = new SignalRConfiguration();\nsignalrConfiguration.hubName = 'Ng2SignalRHub';\nsignalrConfiguration.logging = true;\nsignalrConfiguration.url = 'http://ng2-signalr-backend.azurewebsites.net/';\nsignalrConfiguration.qs = { user: 'donald' };\n\n@NgModule({\n  imports: [\n    SignalRModule.configure(signalrConfiguration)\n  ],\n  declarations: [AppComponent],\n  providers: [ConnectionResolver],\n  bootstrap: [AppComponent]\n  });";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showResolverCode = function () {
        var code = "\nimport { Resolve } from '@angular/router';\nimport { SignalR, SignalRConnection } from 'ng2-signalr';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ConnectionResolver implements Resolve<SignalRConnection> {\n\n  constructor(private _signalR: SignalR) { }\n\n  resolve() {\n    console.log('ConnectionResolver. Resolving...');\n    return this._signalR.connect();\n  }\n}";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showRouteCode = function () {
        var code = "\n// we use the resolver to resolve 'connection' when navigation to the chat page\nimport { Route } from '@angular/router';\nimport { ChatComponent } from './index';\nimport { ConnectionResolver } from './chat.route.resolver';\n\nexport const ChatRoutes: Route[] = [\n\t{\n     path: 'chat',\n     component: ChatComponent,\n     resolve: { connection: ConnectionResolver }\n\t}\n];";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showChatComponentCode = function () {
        var code = "\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { SignalRConnection } from 'ng2-signalr';\n\n@Component({\n  moduleId: module.id,\n  selector: 'chat',\n  template: './chat.component.html'\n})\n\nexport class ChatComponent {\n  private _connection: SignalRConnection;\n\n  constructor(route: ActivatedRoute) {\n    this._connection = route.snapshot.data['connection'];\n  }\n}";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showServerCode = function () {
        var code = "\n[HubName(\"Ng2SignalRHub\")]\npublic class Ng2SignalRHub : Hub\n{\n        public override Task OnConnected() {\n\n            Trace.TraceInformation(\"Ng2SignalRHub - OnConnected\");\n\n            var user = GetAuthenticatedUser();\n\n            Clients.All.OnUserConnected(user);\n\n            return base.OnConnected();\n        }\n\n        private string GetAuthenticatedUser() {\n            var username = Context.QueryString[\"user\"];\n            if (string.IsNullOrWhiteSpace(username))\n                throw new System.Exception(\"Failed to authenticate user.\");\n\n            Trace.TraceInformation(\"GetAuthenticatedUser :\" + username);\n\n            return username;\n        }\n}";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showUnitTestCode = function () {
        var code = "\nimport { inject, TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { SignalRConnectionMockManager, ActivatedRouteMock } from 'ng2-signalr';\n\ndescribe('Chat', () => {\n\n  let connectionMockManager = new SignalRConnectionMockManager();\n  let activatedRouteMock = new ActivatedRouteMock();\n  activatedRouteMock.snapshot.data = { 'connection': connectionMockManager.mock };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        ChatComponent,\n        { provide: ActivatedRoute, useValue: activatedRouteMock }\n      ]\n    });\n  });\n});";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.ngOnDestroy = function () {
        console.log('ngOnDestroy');
    };
    DevSetupComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'dev-setup',
            templateUrl: './dev-setup.component.html'
        }), 
        __metadata('design:paramtypes', [])
    ], DevSetupComponent);
    return DevSetupComponent;
}());
exports.DevSetupComponent = DevSetupComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kYXNoYm9hcmQvZGV2LXNldHVwL2RldlNldHVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEscUJBQXVELGVBQWUsQ0FBQyxDQUFBO0FBVXZFO0lBSUU7UUFGTyxTQUFJLEdBQVcsRUFBRSxDQUFDO0lBR3pCLENBQUM7SUFFRCw4Q0FBa0IsR0FBbEI7UUFDRSxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxvQ0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCwwQ0FBYyxHQUFkO1FBQ0UsSUFBSSxJQUFJLEdBQUksa2hCQWdCVixDQUFDO1FBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCw0Q0FBZ0IsR0FBaEI7UUFDRSxJQUFJLElBQUksR0FBSSxvWkFjZCxDQUFDO1FBQ0csSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCx5Q0FBYSxHQUFiO1FBRUUsSUFBSSxJQUFJLEdBQUksZ1lBWWIsQ0FBQztRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBR0QsaURBQXFCLEdBQXJCO1FBQ0UsSUFBSSxJQUFJLEdBQUcsaWJBaUJiLENBQUM7UUFDQyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVBLDBDQUFjLEdBQWQ7UUFDRSxJQUFJLElBQUksR0FBSSxtc0JBd0JmLENBQUM7UUFDRyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVBLDRDQUFnQixHQUFoQjtRQUNFLElBQUksSUFBSSxHQUFJLG1yQkFvQmIsQ0FBQztRQUVDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBTUQsdUNBQVcsR0FBWDtRQUNFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQW5LSDtRQUFDLGdCQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsUUFBUSxFQUFFLFdBQVc7WUFDckIsV0FBVyxFQUFFLDRCQUE0QjtTQUMxQyxDQUFDOzt5QkFBQTtJQWdLRix3QkFBQztBQUFELENBOUpBLEFBOEpDLElBQUE7QUE5SlkseUJBQWlCLG9CQThKN0IsQ0FBQSIsImZpbGUiOiJhcHAvZGFzaGJvYXJkL2Rldi1zZXR1cC9kZXZTZXR1cC5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5kZWNsYXJlIHZhciBQcmlzbTogYW55O1xuXG5AQ29tcG9uZW50KHtcbiAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgc2VsZWN0b3I6ICdkZXYtc2V0dXAnLFxuICB0ZW1wbGF0ZVVybDogJy4vZGV2LXNldHVwLmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIERldlNldHVwQ29tcG9uZW50ICBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSB7XG5cbiAgcHVibGljIGNvZGU6IHN0cmluZyA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCk6IGFueSB7XG4gICAgcmV0dXJuIFByaXNtLmhpZ2hsaWdodEFsbCgpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zaG93TW9kdWxlQ29kZSgpO1xuICB9XG5cbiAgc2hvd01vZHVsZUNvZGUoKSB7XG4gICAgbGV0IGNvZGUgPSAgYFxuaW1wb3J0IHsgU2lnbmFsUk1vZHVsZSwgU2lnbmFsUkNvbmZpZ3VyYXRpb24gfSBmcm9tICduZzItc2lnbmFscic7XG5cbmxldCBzaWduYWxyQ29uZmlndXJhdGlvbiA9IG5ldyBTaWduYWxSQ29uZmlndXJhdGlvbigpO1xuc2lnbmFsckNvbmZpZ3VyYXRpb24uaHViTmFtZSA9ICdOZzJTaWduYWxSSHViJztcbnNpZ25hbHJDb25maWd1cmF0aW9uLmxvZ2dpbmcgPSB0cnVlO1xuc2lnbmFsckNvbmZpZ3VyYXRpb24udXJsID0gJ2h0dHA6Ly9uZzItc2lnbmFsci1iYWNrZW5kLmF6dXJld2Vic2l0ZXMubmV0Lyc7XG5zaWduYWxyQ29uZmlndXJhdGlvbi5xcyA9IHsgdXNlcjogJ2RvbmFsZCcgfTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIFNpZ25hbFJNb2R1bGUuY29uZmlndXJlKHNpZ25hbHJDb25maWd1cmF0aW9uKVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtBcHBDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtDb25uZWN0aW9uUmVzb2x2ZXJdLFxuICBib290c3RyYXA6IFtBcHBDb21wb25lbnRdXG4gIH0pO2A7XG4gICAgICB0aGlzLmNvZGUgPSBQcmlzbS5oaWdobGlnaHQoY29kZSwgUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQpO1xuICB9XG5cbiAgc2hvd1Jlc29sdmVyQ29kZSgpIHtcbiAgICBsZXQgY29kZSA9ICBgXG5pbXBvcnQgeyBSZXNvbHZlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFNpZ25hbFIsIFNpZ25hbFJDb25uZWN0aW9uIH0gZnJvbSAnbmcyLXNpZ25hbHInO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29ubmVjdGlvblJlc29sdmVyIGltcGxlbWVudHMgUmVzb2x2ZTxTaWduYWxSQ29ubmVjdGlvbj4ge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3NpZ25hbFI6IFNpZ25hbFIpIHsgfVxuXG4gIHJlc29sdmUoKSB7XG4gICAgY29uc29sZS5sb2coJ0Nvbm5lY3Rpb25SZXNvbHZlci4gUmVzb2x2aW5nLi4uJyk7XG4gICAgcmV0dXJuIHRoaXMuX3NpZ25hbFIuY29ubmVjdCgpO1xuICB9XG59YDtcbiAgICAgIHRoaXMuY29kZSA9IFByaXNtLmhpZ2hsaWdodChjb2RlLCBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCk7XG4gIH1cblxuICBzaG93Um91dGVDb2RlKCkge1xuXG4gICAgbGV0IGNvZGUgPSAgYFxuLy8gd2UgdXNlIHRoZSByZXNvbHZlciB0byByZXNvbHZlICdjb25uZWN0aW9uJyB3aGVuIG5hdmlnYXRpb24gdG8gdGhlIGNoYXQgcGFnZVxuaW1wb3J0IHsgUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQ2hhdENvbXBvbmVudCB9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHsgQ29ubmVjdGlvblJlc29sdmVyIH0gZnJvbSAnLi9jaGF0LnJvdXRlLnJlc29sdmVyJztcblxuZXhwb3J0IGNvbnN0IENoYXRSb3V0ZXM6IFJvdXRlW10gPSBbXG5cdHtcbiAgICAgcGF0aDogJ2NoYXQnLFxuICAgICBjb21wb25lbnQ6IENoYXRDb21wb25lbnQsXG4gICAgIHJlc29sdmU6IHsgY29ubmVjdGlvbjogQ29ubmVjdGlvblJlc29sdmVyIH1cblx0fVxuXTtgO1xuICAgICAgdGhpcy5jb2RlID0gUHJpc20uaGlnaGxpZ2h0KGNvZGUsIFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0KTtcbiAgfVxuXG5cbiAgc2hvd0NoYXRDb21wb25lbnRDb2RlKCkge1xuICAgIGxldCBjb2RlID0gYFxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBTaWduYWxSQ29ubmVjdGlvbiB9IGZyb20gJ25nMi1zaWduYWxyJztcblxuQENvbXBvbmVudCh7XG4gIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gIHNlbGVjdG9yOiAnY2hhdCcsXG4gIHRlbXBsYXRlOiAnLi9jaGF0LmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIENoYXRDb21wb25lbnQge1xuICBwcml2YXRlIF9jb25uZWN0aW9uOiBTaWduYWxSQ29ubmVjdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihyb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcbiAgICB0aGlzLl9jb25uZWN0aW9uID0gcm91dGUuc25hcHNob3QuZGF0YVsnY29ubmVjdGlvbiddO1xuICB9XG59YDtcbiAgICB0aGlzLmNvZGUgPSBQcmlzbS5oaWdobGlnaHQoY29kZSwgUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQpO1xuICB9XG5cbiAgIHNob3dTZXJ2ZXJDb2RlKCkge1xuICAgICBsZXQgY29kZSA9ICBgXG5bSHViTmFtZShcIk5nMlNpZ25hbFJIdWJcIildXG5wdWJsaWMgY2xhc3MgTmcyU2lnbmFsUkh1YiA6IEh1Ylxue1xuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgVGFzayBPbkNvbm5lY3RlZCgpIHtcblxuICAgICAgICAgICAgVHJhY2UuVHJhY2VJbmZvcm1hdGlvbihcIk5nMlNpZ25hbFJIdWIgLSBPbkNvbm5lY3RlZFwiKTtcblxuICAgICAgICAgICAgdmFyIHVzZXIgPSBHZXRBdXRoZW50aWNhdGVkVXNlcigpO1xuXG4gICAgICAgICAgICBDbGllbnRzLkFsbC5PblVzZXJDb25uZWN0ZWQodXNlcik7XG5cbiAgICAgICAgICAgIHJldHVybiBiYXNlLk9uQ29ubmVjdGVkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIHN0cmluZyBHZXRBdXRoZW50aWNhdGVkVXNlcigpIHtcbiAgICAgICAgICAgIHZhciB1c2VybmFtZSA9IENvbnRleHQuUXVlcnlTdHJpbmdbXCJ1c2VyXCJdO1xuICAgICAgICAgICAgaWYgKHN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UodXNlcm5hbWUpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeXN0ZW0uRXhjZXB0aW9uKFwiRmFpbGVkIHRvIGF1dGhlbnRpY2F0ZSB1c2VyLlwiKTtcblxuICAgICAgICAgICAgVHJhY2UuVHJhY2VJbmZvcm1hdGlvbihcIkdldEF1dGhlbnRpY2F0ZWRVc2VyIDpcIiArIHVzZXJuYW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIHVzZXJuYW1lO1xuICAgICAgICB9XG59YDtcbiAgICAgIHRoaXMuY29kZSA9IFByaXNtLmhpZ2hsaWdodChjb2RlLCBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCk7XG4gIH1cblxuICAgc2hvd1VuaXRUZXN0Q29kZSgpIHtcbiAgICAgbGV0IGNvZGUgPSAgYFxuaW1wb3J0IHsgaW5qZWN0LCBUZXN0QmVkLCBmYWtlQXN5bmMsIHRpY2sgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBTaWduYWxSQ29ubmVjdGlvbk1vY2tNYW5hZ2VyLCBBY3RpdmF0ZWRSb3V0ZU1vY2sgfSBmcm9tICduZzItc2lnbmFscic7XG5cbmRlc2NyaWJlKCdDaGF0JywgKCkgPT4ge1xuXG4gIGxldCBjb25uZWN0aW9uTW9ja01hbmFnZXIgPSBuZXcgU2lnbmFsUkNvbm5lY3Rpb25Nb2NrTWFuYWdlcigpO1xuICBsZXQgYWN0aXZhdGVkUm91dGVNb2NrID0gbmV3IEFjdGl2YXRlZFJvdXRlTW9jaygpO1xuICBhY3RpdmF0ZWRSb3V0ZU1vY2suc25hcHNob3QuZGF0YSA9IHsgJ2Nvbm5lY3Rpb24nOiBjb25uZWN0aW9uTW9ja01hbmFnZXIubW9jayB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgQ2hhdENvbXBvbmVudCxcbiAgICAgICAgeyBwcm92aWRlOiBBY3RpdmF0ZWRSb3V0ZSwgdXNlVmFsdWU6IGFjdGl2YXRlZFJvdXRlTW9jayB9XG4gICAgICBdXG4gICAgfSk7XG4gIH0pO1xufSk7YDtcblxuICAgICAgdGhpcy5jb2RlID0gUHJpc20uaGlnaGxpZ2h0KGNvZGUsIFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0KTtcbiAgfVxuXG5cblxuXG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgY29uc29sZS5sb2coJ25nT25EZXN0cm95Jyk7XG4gIH1cbn1cbiJdfQ==
