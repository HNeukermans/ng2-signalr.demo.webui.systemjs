"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var DevSetupComponent = (function () {
    function DevSetupComponent() {
        this.code = '';
    }
    DevSetupComponent.prototype.ngAfterViewChecked = function () {
        return Prism.highlightAll();
    };
    DevSetupComponent.prototype.ngOnInit = function () {
        this.showModuleCode();
    };
    DevSetupComponent.prototype.showModuleCode = function () {
        var code = "\nimport { SignalRModule, SignalRConfiguration } from 'ng2-signalr';\n\nlet signalrConfiguration = new SignalRConfiguration();\nsignalrConfiguration.hubName = 'Ng2SignalRHub';\nsignalrConfiguration.logging = true;\nsignalrConfiguration.url = 'http://ng2-signalr-backend.azurewebsites.net/';\nsignalrConfiguration.qs = { user: 'donald' };\n\n@NgModule({\n  imports: [\n    SignalRModule.configure(signalrConfiguration)\n  ],\n  declarations: [AppComponent],\n  providers: [ConnectionResolver],\n  bootstrap: [AppComponent]\n  });";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showResolverCode = function () {
        var code = "\nimport { Resolve } from '@angular/router';\nimport { SignalR, SignalRConnection } from 'ng2-signalr';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ConnectionResolver implements Resolve<SignalRConnection> {\n\n  constructor(private _signalR: SignalR) { }\n\n  resolve() {\n    console.log('ConnectionResolver. Resolving...');\n    return this._signalR.connect();\n  }\n}";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showRouteCode = function () {
        var code = "\n// we use the resolver to resolve 'connection' when navigation to the chat page\nimport { Route } from '@angular/router';\nimport { DocumentationComponent } from './index';\nimport { ConnectionResolver } from './documentation.route.resolver';\n\nexport const DocumentationRoutes: Route[] = [\n\t{\n\t\tpath: 'documentation',\n    component: DocumentationComponent,\n     resolve: { connection: ConnectionResolver }\n\t}\n];";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showChatComponentCode = function () {
        var code = "\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { SignalRConnection } from 'ng2-signalr';\n\n@Component({\n  moduleId: module.id,\n  selector: 'chat',\n  templateUrl: './chat.component.html'\n})\n\nexport class ChatComponent {\n  private _connection: SignalRConnection;\n\n  constructor(route: ActivatedRoute) {\n    this._connection = route.snapshot.data['connection'];\n  }\n}";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.showServerCode = function () {
        var code = "\n[HubName(\"Ng2SignalRHub\")]\npublic class Ng2SignalRHub : Hub\n{\n        public override Task OnConnected() {\n\n            Trace.TraceInformation(\"Ng2SignalRHub - OnConnected\");\n\n            var user = GetAuthenticatedUser();\n\n            Clients.All.OnUserConnected(user);\n\n            return base.OnConnected();\n        }\n\n        private string GetAuthenticatedUser() {\n            var username = Context.QueryString[\"user\"];\n            if (string.IsNullOrWhiteSpace(username))\n                throw new System.Exception(\"Failed to authenticate user.\");\n\n            Trace.TraceInformation(\"GetAuthenticatedUser :\" + username);\n\n            return username;\n        }\n}\n\n";
        this.code = Prism.highlight(code, Prism.languages.javascript);
    };
    DevSetupComponent.prototype.ngOnDestroy = function () {
        console.log('ngOnDestroy');
    };
    DevSetupComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'dev-setup',
            templateUrl: './dev-setup.component.html'
        }), 
        __metadata('design:paramtypes', [])
    ], DevSetupComponent);
    return DevSetupComponent;
}());
exports.DevSetupComponent = DevSetupComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kYXNoYm9hcmQvZGV2LXNldHVwL2RldlNldHVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEscUJBQXVELGVBQWUsQ0FBQyxDQUFBO0FBVXZFO0lBSUU7UUFGTyxTQUFJLEdBQVcsRUFBRSxDQUFDO0lBR3pCLENBQUM7SUFFRCw4Q0FBa0IsR0FBbEI7UUFDRSxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxvQ0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCwwQ0FBYyxHQUFkO1FBQ0UsSUFBSSxJQUFJLEdBQUksa2hCQWdCVixDQUFBO1FBQ0EsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCw0Q0FBZ0IsR0FBaEI7UUFDRSxJQUFJLElBQUksR0FBSSxvWkFjZCxDQUFBO1FBQ0ksSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCx5Q0FBYSxHQUFiO1FBRUUsSUFBSSxJQUFJLEdBQUksMmFBWWIsQ0FBQTtRQUNHLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBR0QsaURBQXFCLEdBQXJCO1FBQ0UsSUFBSSxJQUFJLEdBQUcsb2JBaUJiLENBQUE7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVBLDBDQUFjLEdBQWQ7UUFDRSxJQUFJLElBQUksR0FBSSx1c0JBMEJoQixDQUFBO1FBQ0ssSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCx1Q0FBVyxHQUFYO1FBQ0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBdklIO1FBQUMsZ0JBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNuQixRQUFRLEVBQUUsV0FBVztZQUNyQixXQUFXLEVBQUUsNEJBQTRCO1NBQzFDLENBQUM7O3lCQUFBO0lBb0lGLHdCQUFDO0FBQUQsQ0FsSUEsQUFrSUMsSUFBQTtBQWxJWSx5QkFBaUIsb0JBa0k3QixDQUFBIiwiZmlsZSI6ImFwcC9kYXNoYm9hcmQvZGV2LXNldHVwL2RldlNldHVwLmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5kZWNsYXJlIHZhciBQcmlzbTogYW55O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcclxuICBzZWxlY3RvcjogJ2Rldi1zZXR1cCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2Rldi1zZXR1cC5jb21wb25lbnQuaHRtbCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBEZXZTZXR1cENvbXBvbmVudCAgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3kge1xyXG5cclxuICBwdWJsaWMgY29kZTogc3RyaW5nID0gJyc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdDaGVja2VkKCk6IGFueSB7XHJcbiAgICByZXR1cm4gUHJpc20uaGlnaGxpZ2h0QWxsKCk7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuc2hvd01vZHVsZUNvZGUoKTtcclxuICB9XHJcblxyXG4gIHNob3dNb2R1bGVDb2RlKCkge1xyXG4gICAgbGV0IGNvZGUgPSAgYFxyXG5pbXBvcnQgeyBTaWduYWxSTW9kdWxlLCBTaWduYWxSQ29uZmlndXJhdGlvbiB9IGZyb20gJ25nMi1zaWduYWxyJztcclxuXHJcbmxldCBzaWduYWxyQ29uZmlndXJhdGlvbiA9IG5ldyBTaWduYWxSQ29uZmlndXJhdGlvbigpO1xyXG5zaWduYWxyQ29uZmlndXJhdGlvbi5odWJOYW1lID0gJ05nMlNpZ25hbFJIdWInO1xyXG5zaWduYWxyQ29uZmlndXJhdGlvbi5sb2dnaW5nID0gdHJ1ZTtcclxuc2lnbmFsckNvbmZpZ3VyYXRpb24udXJsID0gJ2h0dHA6Ly9uZzItc2lnbmFsci1iYWNrZW5kLmF6dXJld2Vic2l0ZXMubmV0Lyc7XHJcbnNpZ25hbHJDb25maWd1cmF0aW9uLnFzID0geyB1c2VyOiAnZG9uYWxkJyB9O1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBTaWduYWxSTW9kdWxlLmNvbmZpZ3VyZShzaWduYWxyQ29uZmlndXJhdGlvbilcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW0FwcENvbXBvbmVudF0sXHJcbiAgcHJvdmlkZXJzOiBbQ29ubmVjdGlvblJlc29sdmVyXSxcclxuICBib290c3RyYXA6IFtBcHBDb21wb25lbnRdXHJcbiAgfSk7YFxyXG4gICAgICB0aGlzLmNvZGUgPSBQcmlzbS5oaWdobGlnaHQoY29kZSwgUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQpO1xyXG4gIH1cclxuXHJcbiAgc2hvd1Jlc29sdmVyQ29kZSgpIHtcclxuICAgIGxldCBjb2RlID0gIGBcclxuaW1wb3J0IHsgUmVzb2x2ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IFNpZ25hbFIsIFNpZ25hbFJDb25uZWN0aW9uIH0gZnJvbSAnbmcyLXNpZ25hbHInO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uUmVzb2x2ZXIgaW1wbGVtZW50cyBSZXNvbHZlPFNpZ25hbFJDb25uZWN0aW9uPiB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3NpZ25hbFI6IFNpZ25hbFIpIHsgfVxyXG5cclxuICByZXNvbHZlKCkge1xyXG4gICAgY29uc29sZS5sb2coJ0Nvbm5lY3Rpb25SZXNvbHZlci4gUmVzb2x2aW5nLi4uJyk7XHJcbiAgICByZXR1cm4gdGhpcy5fc2lnbmFsUi5jb25uZWN0KCk7XHJcbiAgfVxyXG59YFxyXG4gICAgICB0aGlzLmNvZGUgPSBQcmlzbS5oaWdobGlnaHQoY29kZSwgUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQpO1xyXG4gIH1cclxuXHJcbiAgc2hvd1JvdXRlQ29kZSgpIHtcclxuXHJcbiAgICBsZXQgY29kZSA9ICBgXHJcbi8vIHdlIHVzZSB0aGUgcmVzb2x2ZXIgdG8gcmVzb2x2ZSAnY29ubmVjdGlvbicgd2hlbiBuYXZpZ2F0aW9uIHRvIHRoZSBjaGF0IHBhZ2VcclxuaW1wb3J0IHsgUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBEb2N1bWVudGF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9pbmRleCc7XHJcbmltcG9ydCB7IENvbm5lY3Rpb25SZXNvbHZlciB9IGZyb20gJy4vZG9jdW1lbnRhdGlvbi5yb3V0ZS5yZXNvbHZlcic7XHJcblxyXG5leHBvcnQgY29uc3QgRG9jdW1lbnRhdGlvblJvdXRlczogUm91dGVbXSA9IFtcclxuXHR7XHJcblx0XHRwYXRoOiAnZG9jdW1lbnRhdGlvbicsXHJcbiAgICBjb21wb25lbnQ6IERvY3VtZW50YXRpb25Db21wb25lbnQsXHJcbiAgICAgcmVzb2x2ZTogeyBjb25uZWN0aW9uOiBDb25uZWN0aW9uUmVzb2x2ZXIgfVxyXG5cdH1cclxuXTtgXHJcbiAgICAgIHRoaXMuY29kZSA9IFByaXNtLmhpZ2hsaWdodChjb2RlLCBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgc2hvd0NoYXRDb21wb25lbnRDb2RlKCkge1xyXG4gICAgbGV0IGNvZGUgPSBgXHJcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IFNpZ25hbFJDb25uZWN0aW9uIH0gZnJvbSAnbmcyLXNpZ25hbHInO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcclxuICBzZWxlY3RvcjogJ2NoYXQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9jaGF0LmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIENoYXRDb21wb25lbnQge1xyXG4gIHByaXZhdGUgX2Nvbm5lY3Rpb246IFNpZ25hbFJDb25uZWN0aW9uO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihyb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcclxuICAgIHRoaXMuX2Nvbm5lY3Rpb24gPSByb3V0ZS5zbmFwc2hvdC5kYXRhWydjb25uZWN0aW9uJ107XHJcbiAgfVxyXG59YFxyXG4gICAgdGhpcy5jb2RlID0gUHJpc20uaGlnaGxpZ2h0KGNvZGUsIFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0KTtcclxuICB9XHJcblxyXG4gICBzaG93U2VydmVyQ29kZSgpIHtcclxuICAgICBsZXQgY29kZSA9ICBgXHJcbltIdWJOYW1lKFwiTmcyU2lnbmFsUkh1YlwiKV1cclxucHVibGljIGNsYXNzIE5nMlNpZ25hbFJIdWIgOiBIdWJcclxue1xyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSBUYXNrIE9uQ29ubmVjdGVkKCkge1xyXG5cclxuICAgICAgICAgICAgVHJhY2UuVHJhY2VJbmZvcm1hdGlvbihcIk5nMlNpZ25hbFJIdWIgLSBPbkNvbm5lY3RlZFwiKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB1c2VyID0gR2V0QXV0aGVudGljYXRlZFVzZXIoKTtcclxuXHJcbiAgICAgICAgICAgIENsaWVudHMuQWxsLk9uVXNlckNvbm5lY3RlZCh1c2VyKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBiYXNlLk9uQ29ubmVjdGVkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0cmluZyBHZXRBdXRoZW50aWNhdGVkVXNlcigpIHtcclxuICAgICAgICAgICAgdmFyIHVzZXJuYW1lID0gQ29udGV4dC5RdWVyeVN0cmluZ1tcInVzZXJcIl07XHJcbiAgICAgICAgICAgIGlmIChzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKHVzZXJuYW1lKSlcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeXN0ZW0uRXhjZXB0aW9uKFwiRmFpbGVkIHRvIGF1dGhlbnRpY2F0ZSB1c2VyLlwiKTtcclxuXHJcbiAgICAgICAgICAgIFRyYWNlLlRyYWNlSW5mb3JtYXRpb24oXCJHZXRBdXRoZW50aWNhdGVkVXNlciA6XCIgKyB1c2VybmFtZSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdXNlcm5hbWU7XHJcbiAgICAgICAgfVxyXG59XHJcblxyXG5gXHJcbiAgICAgIHRoaXMuY29kZSA9IFByaXNtLmhpZ2hsaWdodChjb2RlLCBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIGNvbnNvbGUubG9nKCduZ09uRGVzdHJveScpO1xyXG4gIH1cclxufVxyXG4iXX0=
